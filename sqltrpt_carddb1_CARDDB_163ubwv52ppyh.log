
GENERAL INFORMATION SECTION
-------------------------------------------------------------------------------
Tuning Task Name   : TASK_208449
Tuning Task Owner  : DBASTEVE
Workload Type      : Single SQL Statement
Scope              : COMPREHENSIVE
Time Limit(seconds): 900
Completion Status  : COMPLETED
Started at         : 09/16/2017 11:12:40
Completed at       : 09/16/2017 11:22:14

-------------------------------------------------------------------------------
Schema Name: WISE
SQL ID     : 163ubwv52ppyh
SQL Text   : select customer.external_id memberCode,litd.payment_dte,lit.txn_i
             d tradeId,litd.account_nmbr accountNmbr, litd.term  from
             lm_installment_tran_d litd, lm_installment_tran lit,lm_customer
             customer,lm_system ls,fcs_acct_register fcs where
             litd.account_nmbr = lit.account_nmbr   and
             lit.cust_nbr=customer.cust_nbr  and
             customer.external_id=fcs.member_code   and litd.tran_type='4000'
              and fcs.AUTO_REPAY = 'Y'  and litd.billing_flag= '01' and
             (litd.pymt_flag = '00' or litd.pymt_flag = '04' )   and
             litd.payment_dte<trunc(ls.TODAYS_CALENDAR)+1 and lit.status not
             in ('1','5') order by memberCode,accountNmbr,term

-------------------------------------------------------------------------------
FINDINGS SECTION (1 finding)
-------------------------------------------------------------------------------

1- SQL Profile Finding (see explain plans section below)
--------------------------------------------------------
  为此语句找到了性能更好的执行计划 2。选择以下 SQL 概要文件之一进行实施。

  Recommendation (estimated benefit: 65.62%)
  ------------------------------------------
  - 考虑接受推荐的 SQL 概要文件。
    execute dbms_sqltune.accept_sql_profile(task_name => 'TASK_208449',
            task_owner => 'DBASTEVE', replace => TRUE);

  Recommendation (estimated benefit: 99.78%)
  ------------------------------------------
  - 考虑接受建议的 SQL 概要文件, 以便对此语句使用并行执行。
    execute dbms_sqltune.accept_sql_profile(task_name => 'TASK_208449',
            task_owner => 'DBASTEVE', replace => TRUE, profile_type =>
            DBMS_SQLTUNE.PX_PROFILE);

  与 DOP 128 并行执行此查询会使 SQL 概要文件计划上的响应时间缩短 99.38%。但是, 启用并行执行时要付出一些代价。它将增加语句的资源消耗
  (预计为 21.11%), 这会导致系统吞吐量降低。此外, 由于在非常短的持续时间内消耗了这些资源, 因此如果没有足够可用的硬件容量,
  并发语句的响应时间将受到负面影响。

  The following data shows some sampled statistics for this SQL from the past
  week and projected weekly values when parallel execution is enabled.

                                 Past week sampled statistics for this SQL
                                 -----------------------------------------
  Number of executions                                                   0
  Percent of total activity                                              0
  Percent of samples with #Active Sessions > 2*CPU                       0
  Weekly DB time (in sec)                                                0

                              Projected statistics with Parallel Execution
                              --------------------------------------------
  Weekly DB time (in sec)                                                0

-------------------------------------------------------------------------------
EXPLAIN PLANS SECTION
-------------------------------------------------------------------------------

1- Original With Adjusted Cost
------------------------------
Plan hash value: 685618080

-------------------------------------------------------------------------------------------------------------------------------------------
| Id  | Operation                                 | Name                  | Rows  | Bytes |TempSpc| Cost (%CPU)| Time     | Pstart| Pstop |
-------------------------------------------------------------------------------------------------------------------------------------------
|   0 | SELECT STATEMENT                          |                       |   391K|    54M|       |   123K  (1)| 00:24:41 |       |       |
|   1 |  SORT ORDER BY                            |                       |   391K|    54M|    58M|   123K  (1)| 00:24:41 |       |       |
|   2 |   NESTED LOOPS                            |                       |   391K|    54M|       |   110K  (1)| 00:22:08 |       |       |
|   3 |    NESTED LOOPS                           |                       |   391K|    54M|       |   110K  (1)| 00:22:08 |       |       |
|*  4 |     HASH JOIN                             |                       |   331K|    42M|    35M| 60916   (1)| 00:12:11 |       |       |
|*  5 |      HASH JOIN                            |                       |   331K|    31M|    18M| 48879   (1)| 00:09:47 |       |       |
|   6 |       PART JOIN FILTER CREATE             | :BF0000               |   331K|    15M|       | 27780   (1)| 00:05:34 |       |       |
|   7 |        NESTED LOOPS                       |                       |   331K|    15M|       | 27780   (1)| 00:05:34 |       |       |
|   8 |         NESTED LOOPS                      |                       |   357K|    15M|       | 27780   (1)| 00:05:34 |       |       |
|   9 |          TABLE ACCESS FULL                | LM_SYSTEM             |     1 |     8 |       |    15   (0)| 00:00:01 |       |       |
|* 10 |          INDEX RANGE SCAN                 | IDX_TRAND_PMTDTE      |   357K|       |       |    22   (0)| 00:00:01 |       |       |
|* 11 |         TABLE ACCESS BY GLOBAL INDEX ROWID| LM_INSTALLMENT_TRAN_D |   331K|    12M|       | 27765   (1)| 00:05:34 | ROWID | ROWID |
|  12 |       PARTITION HASH JOIN-FILTER          |                       | 21171 |  1095K|       | 20091   (1)| 00:04:02 |:BF0000|:BF0000|
|* 13 |        TABLE ACCESS FULL                  | LM_INSTALLMENT_TRAN   | 21171 |  1095K|       | 20091   (1)| 00:04:02 |:BF0000|:BF0000|
|  14 |      VIEW                                 | index$_join$_003      |  1337K|    40M|       |  7477   (1)| 00:01:30 |       |       |
|* 15 |       HASH JOIN                           |                       |       |       |       |            |          |       |       |
|  16 |        INDEX FAST FULL SCAN               | CST_LC_IDF            |  1337K|    40M|       |  1013   (1)| 00:00:13 |       |       |
|  17 |        INDEX FAST FULL SCAN               | LM_CUSTOMER_PK        |  1337K|    40M|       |  2310   (1)| 00:00:28 |       |       |
|* 18 |     INDEX UNIQUE SCAN                     | UK_FCS_REG_MEM        |     1 |       |       |     1   (0)| 00:00:01 |       |       |
|* 19 |    TABLE ACCESS BY INDEX ROWID            | FCS_ACCT_REGISTER     |     1 |    14 |       |     1   (0)| 00:00:01 |       |       |
-------------------------------------------------------------------------------------------------------------------------------------------

Predicate Information (identified by operation id):
---------------------------------------------------

   4 - access("LIT"."CUST_NBR"="CUSTOMER"."CUST_NBR")
   5 - access("LITD"."ACCOUNT_NMBR"="LIT"."ACCOUNT_NMBR")
  10 - access("LITD"."PAYMENT_DTE"<TRUNC(INTERNAL_FUNCTION("LS"."TODAYS_CALENDAR"))+1)
  11 - filter("LITD"."TRAN_TYPE"='4000' AND "LITD"."BILLING_FLAG"='01' AND ("LITD"."PYMT_FLAG"='00' OR "LITD"."PYMT_FLAG"='04'))
  13 - filter("LIT"."STATUS"<>'5' AND "LIT"."STATUS"<>'1')
  15 - access(ROWID=ROWID)
  18 - access("CUSTOMER"."EXTERNAL_ID"="FCS"."MEMBER_CODE")
  19 - filter("FCS"."AUTO_REPAY"='Y')

2- Using SQL Profile
--------------------
Plan hash value: 2548327521

-----------------------------------------------------------------------------------------------------------------------------------------
| Id  | Operation                               | Name                  | Rows  | Bytes |TempSpc| Cost (%CPU)| Time     | Pstart| Pstop |
-----------------------------------------------------------------------------------------------------------------------------------------
|   0 | SELECT STATEMENT                        |                       |   391K|    54M|       | 42392   (1)| 00:08:29 |       |       |
|   1 |  SORT ORDER BY                          |                       |   391K|    54M|    58M| 42392   (1)| 00:08:29 |       |       |
|   2 |   NESTED LOOPS                          |                       |   391K|    54M|       | 29657   (1)| 00:05:56 |       |       |
|   3 |    NESTED LOOPS                         |                       |   391K|    54M|       | 29657   (1)| 00:05:56 |       |       |
|   4 |     NESTED LOOPS                        |                       |    59 |  7847 |       | 29648   (1)| 00:05:56 |       |       |
|   5 |      NESTED LOOPS                       |                       |    59 |  5959 |       | 29639   (1)| 00:05:56 |       |       |
|   6 |       MERGE JOIN CARTESIAN              |                       | 21171 |  1261K|       | 20109   (1)| 00:04:02 |       |       |
|   7 |        TABLE ACCESS FULL                | LM_SYSTEM             |     1 |     8 |       |    15   (0)| 00:00:01 |       |       |
|   8 |        BUFFER SORT                      |                       | 21171 |  1095K|       | 20094   (1)| 00:04:02 |       |       |
|   9 |         PARTITION HASH ALL              |                       | 21171 |  1095K|       | 20094   (1)| 00:04:02 |     1 |     8 |
|* 10 |          TABLE ACCESS FULL              | LM_INSTALLMENT_TRAN   | 21171 |  1095K|       | 20094   (1)| 00:04:02 |     1 |     8 |
|* 11 |       TABLE ACCESS BY GLOBAL INDEX ROWID| LM_INSTALLMENT_TRAN_D |     1 |    40 |       |     1   (0)| 00:00:01 | ROWID | ROWID |
|* 12 |        INDEX RANGE SCAN                 | UK_INSTALLMENT_TRAN_D |     9 |       |       |     1   (0)| 00:00:01 |       |       |
|  13 |      TABLE ACCESS BY INDEX ROWID        | LM_CUSTOMER           |     1 |    32 |       |     1   (0)| 00:00:01 |       |       |
|* 14 |       INDEX UNIQUE SCAN                 | LM_CUSTOMER_PK        |     1 |       |       |     1   (0)| 00:00:01 |       |       |
|* 15 |     INDEX UNIQUE SCAN                   | UK_FCS_REG_MEM        |     1 |       |       |     1   (0)| 00:00:01 |       |       |
|* 16 |    TABLE ACCESS BY INDEX ROWID          | FCS_ACCT_REGISTER     |  6625 | 92750 |       |     1   (0)| 00:00:01 |       |       |
-----------------------------------------------------------------------------------------------------------------------------------------

Predicate Information (identified by operation id):
---------------------------------------------------

  10 - filter("LIT"."STATUS"<>'5' AND "LIT"."STATUS"<>'1')
  11 - filter("LITD"."BILLING_FLAG"='01' AND ("LITD"."PYMT_FLAG"='00' OR "LITD"."PYMT_FLAG"='04') AND
              "LITD"."PAYMENT_DTE"<TRUNC(INTERNAL_FUNCTION("LS"."TODAYS_CALENDAR"))+1)
  12 - access("LITD"."ACCOUNT_NMBR"="LIT"."ACCOUNT_NMBR" AND "LITD"."TRAN_TYPE"='4000')
       filter("LITD"."TRAN_TYPE"='4000')
  14 - access("LIT"."CUST_NBR"="CUSTOMER"."CUST_NBR")
  15 - access("CUSTOMER"."EXTERNAL_ID"="FCS"."MEMBER_CODE")
  16 - filter("FCS"."AUTO_REPAY"='Y')

3- Using Parallel Execution
---------------------------
Plan hash value: 329799309

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
| Id  | Operation                                   | Name                  | Rows  | Bytes |TempSpc| Cost (%CPU)| Time     | Pstart| Pstop |    TQ  |IN-OUT| PQ Distrib |
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
|   0 | SELECT STATEMENT                            |                       |   391K|    54M|       |   261   (1)| 00:00:04 |       |       |        |      |            |
|   1 |  PX COORDINATOR                             |                       |       |       |       |            |          |       |       |        |      |            |
|   2 |   PX SEND QC (ORDER)                        | :TQ10002              |   391K|    54M|       |   261   (1)| 00:00:04 |       |       |  Q1,02 | P->S | QC (ORDER) |
|   3 |    SORT ORDER BY                            |                       |   391K|    54M|    58M|   261   (1)| 00:00:04 |       |       |  Q1,02 | PCWP |            |
|   4 |     PX RECEIVE                              |                       |   391K|    54M|       |   260   (0)| 00:00:04 |       |       |  Q1,02 | PCWP |            |
|   5 |      PX SEND RANGE                          | :TQ10001              |   391K|    54M|       |   260   (0)| 00:00:04 |       |       |  Q1,01 | P->P | RANGE      |
|   6 |       NESTED LOOPS                          |                       |   391K|    54M|       |   260   (0)| 00:00:04 |       |       |  Q1,01 | PCWP |            |
|   7 |        NESTED LOOPS                         |                       |   391K|    54M|       |   260   (0)| 00:00:04 |       |       |  Q1,01 | PCWP |            |
|   8 |         NESTED LOOPS                        |                       |    59 |  7847 |       |   260   (0)| 00:00:04 |       |       |  Q1,01 | PCWP |            |
|   9 |          NESTED LOOPS                       |                       |    59 |  5959 |       |   260   (0)| 00:00:04 |       |       |  Q1,01 | PCWP |            |
|  10 |           MERGE JOIN CARTESIAN              |                       | 21171 |  1261K|       |   177   (0)| 00:00:03 |       |       |  Q1,01 | PCWP |            |
|  11 |            BUFFER SORT                      |                       |       |       |       |            |          |       |       |  Q1,01 | PCWC |            |
|  12 |             PX RECEIVE                      |                       |     1 |     8 |       |     2   (0)| 00:00:01 |       |       |  Q1,01 | PCWP |            |
|  13 |              PX SEND BROADCAST              | :TQ10000              |     1 |     8 |       |     2   (0)| 00:00:01 |       |       |  Q1,00 | P->P | BROADCAST  |
|  14 |               PX BLOCK ITERATOR             |                       |     1 |     8 |       |     2   (0)| 00:00:01 |       |       |  Q1,00 | PCWC |            |
|  15 |                TABLE ACCESS FULL            | LM_SYSTEM             |     1 |     8 |       |     2   (0)| 00:00:01 |       |       |  Q1,00 | PCWP |            |
|  16 |            BUFFER SORT                      |                       | 21171 |  1095K|       |   175   (0)| 00:00:03 |       |       |  Q1,01 | PCWP |            |
|  17 |             PX BLOCK ITERATOR               |                       | 21171 |  1095K|       |   174   (0)| 00:00:03 |     1 |     8 |  Q1,01 | PCWC |            |
|* 18 |              TABLE ACCESS FULL              | LM_INSTALLMENT_TRAN   | 21171 |  1095K|       |   174   (0)| 00:00:03 |     1 |     8 |  Q1,01 | PCWP |            |
|* 19 |           TABLE ACCESS BY GLOBAL INDEX ROWID| LM_INSTALLMENT_TRAN_D |     1 |    40 |       |     0   (0)| 00:00:01 | ROWID | ROWID |  Q1,01 | PCWP |            |
|* 20 |            INDEX RANGE SCAN                 | UK_INSTALLMENT_TRAN_D |     9 |       |       |     0   (0)| 00:00:01 |       |       |  Q1,01 | PCWP |            |
|  21 |          TABLE ACCESS BY INDEX ROWID        | LM_CUSTOMER           |     1 |    32 |       |     0   (0)| 00:00:01 |       |       |  Q1,01 | PCWP |            |
|* 22 |           INDEX UNIQUE SCAN                 | LM_CUSTOMER_PK        |     1 |       |       |     0   (0)| 00:00:01 |       |       |  Q1,01 | PCWP |            |
|* 23 |         INDEX UNIQUE SCAN                   | UK_FCS_REG_MEM        |     1 |       |       |     0   (0)| 00:00:01 |       |       |  Q1,01 | PCWP |            |
|* 24 |        TABLE ACCESS BY INDEX ROWID          | FCS_ACCT_REGISTER     |  6625 | 92750 |       |     0   (0)| 00:00:01 |       |       |  Q1,01 | PCWP |            |
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Predicate Information (identified by operation id):
---------------------------------------------------

  18 - filter("LIT"."STATUS"<>'5' AND "LIT"."STATUS"<>'1')
  19 - filter("LITD"."BILLING_FLAG"='01' AND ("LITD"."PYMT_FLAG"='00' OR "LITD"."PYMT_FLAG"='04') AND
              "LITD"."PAYMENT_DTE"<TRUNC(INTERNAL_FUNCTION("LS"."TODAYS_CALENDAR"))+1)
  20 - access("LITD"."ACCOUNT_NMBR"="LIT"."ACCOUNT_NMBR" AND "LITD"."TRAN_TYPE"='4000')
       filter("LITD"."TRAN_TYPE"='4000')
  22 - access("LIT"."CUST_NBR"="CUSTOMER"."CUST_NBR")
  23 - access("CUSTOMER"."EXTERNAL_ID"="FCS"."MEMBER_CODE")
  24 - filter("FCS"."AUTO_REPAY"='Y')

-------------------------------------------------------------------------------


